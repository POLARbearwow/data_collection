/*
 * BasketballDetector.hpp
 *
 * Simple utility class that encapsulates common computer-vision steps required to find a basketball in a single image.
 *
 * The detector is intentionally kept self-contained so that it can be re-used by different online / offline tools.
 *
 * Typical processing pipeline implemented in detect():
 *   1.  BGR image  -> HSV
 *   2.  HSV threshold (low / high)
 *   3.  Morphological closing (configurable kernel size & iterations)
 *   4.  Optional median filter (configurable kernel size)
 *   5.  Find largest contour and return its centre & radius
 *   6.  Kalman filter smoothing and tracking
 *
 * Author: auto-generated by ChatGPT-o3
 */
#pragma once

#include <opencv2/opencv.hpp>
#include <vector>

class BasketballDetector {
public:
    struct Result {
        bool found = false;          // 是否检测到篮球
        cv::Point2f center;          // 像素坐标圆心
        float       radius = 0.f;    // 半径
        cv::Mat     mask;            // 最终二值掩码 (单通道, CV_8U)
        std::vector<cv::Point> inliers; // RANSAC 拟合圆的内点
        cv::Point2f smoothedCenter;  // Kalman滤波后的平滑圆心
        float       smoothedRadius;  // Kalman滤波后的平滑半径
        bool        hasTracking = false; // 是否有有效的跟踪
    };

    BasketballDetector();

    // 直接设置 HSV 阈值
    void setHSVRange(const cv::Scalar &low, const cv::Scalar &high);

    // 调整形态学与滤波参数 (kernelSize 必须为奇数且 >=3)
    void setMorphParams(int kernelSize, int closeIterations = 1);
    void setMedianKernel(int kernelSize); // 0 关闭中值滤波

    // 设置RANSAC参数
    void setRansacParams(int minInliers = 100, float maxJumpPixels = 150.0f, int maxLostFrames = 30);

    // 获取当前HSV参数
    void getHSVRange(cv::Scalar &low, cv::Scalar &high) const;

    // 在一帧图像上进行检测
    Result detect(const cv::Mat &frameBGR);

    // 在一帧图像上进行检测（可选择是否进行滤波）
    Result detect(const cv::Mat &frameBGR, bool enableFiltering);

    // 重置跟踪器
    void resetTracking();

private:
    cv::Scalar hsvLow_  = cv::Scalar(2, 149, 22);
    cv::Scalar hsvHigh_ = cv::Scalar(2, 217, 230);

    int morphKernelSize_   = 17;   // 闭运算 kernel 尺寸 (正方形)
    int morphIterations_   = 4;   // 闭运算迭代次数
    int medianKernelSize_  = 17;   // 中值滤波 kernel (0 表示不使用)

    // RANSAC参数
    int minInliers_ = 100;         // 最小内点数
    float maxJumpPixels_ = 150.0f; // 最大跳变像素数
    int maxLostFrames_ = 30;       // 最大丢失帧数

    // Kalman滤波相关
    cv::KalmanFilter kalmanFilter_;
    bool hasKalman_ = false;
    int lostFrameCount_ = 0;
    
    // 初始化Kalman滤波器
    void initKalmanFilter();
    
    // 重置Kalman滤波器
    void resetKalmanFilter(const cv::Point2f& center, float radius);
    
    // 更新Kalman滤波器
    void updateKalmanFilter(const cv::Point2f& center, float radius);
}; 